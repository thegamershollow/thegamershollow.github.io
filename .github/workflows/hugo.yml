name: Deploy Hugo site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.128.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo --minify --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: List contents of the public directory
        run: ls -la ./public  # Check if the public directory exists and has content
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we're starting from the main branch
          fetch-depth: 0  # Ensure full history is fetched

      - name: Set up Git for deployment
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git status  # Log the current status of the repository

      - name: Check if gh-pages branch exists and create if necessary
        run: |
          git fetch  # Fetch all branches from the remote
          if git branch --list gh-pages; then
            echo "gh-pages branch exists, checking it out"
            git checkout gh-pages  # Checkout gh-pages if it exists
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages  # Create a new orphan branch
            git rm -rf .  # Clean up the working tree
          fi
          git status  # Log the repository status

      - name: Copy the public folder to gh-pages
        run: |
          echo "Copying files to gh-pages"
          cp -r ./public/* ./  # Copy the Hugo build files to the root of gh-pages
          git add -A
          git status  # Log the changes to be committed
          git commit -m "Deploy site to GitHub Pages" || echo "No changes to commit"  # Avoid errors if there are no changes
          git status  # Log the commit status

      - name: Push changes to gh-pages branch
        run: |
          echo "Pushing changes to gh-pages branch"
          git push origin gh-pages --force  # Force push to gh-pages branch
          git status  # Log the status after the push

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          branch: gh-pages  # Ensure it's deploying from the correct branch
